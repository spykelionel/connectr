generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  gender       String?
  email        String   @unique
  contact      String?
  profileurl   String?
  isAdmin      Boolean  @default(false)
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String?

  // Relations
  roleId String? @db.ObjectId
  role   Role?   @relation(fields: [roleId], references: [id])

  // Posts
  posts Post[]

  // Comments
  comments Comment[]

  // User Connections (many-to-many through junction table)
  connectionsAsUser   UserConnection[] @relation("UserConnections")
  connectionsAsFriend UserConnection[] @relation("FriendConnections")

  // Network Memberships (many-to-many through junction table)
  networkMemberships NetworkMembership[]

  // Network Administrations (many-to-many through junction table)
  networkAdministrations NetworkAdministration[]

  // Comment Reactions (many-to-many through junction table)
  commentLikes CommentReaction[]
  upvotes      PostUpvote[]      @relation("PostUpvotes")

  downvotes PostDownvote[] @relation("PostDownvotes")
}

model Network {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  avatar      String?  @default("default_avatar")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]

  // Network Memberships (many-to-many through junction table)
  memberships NetworkMembership[]

  // Network Administrations (many-to-many through junction table)
  administrations NetworkAdministration[]
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String?
  attachment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  networkId String?  @db.ObjectId
  network   Network? @relation(fields: [networkId], references: [id])

  comments Comment[]

  upvotes PostUpvote[] @relation("PostUpvotes")

  downvotes PostDownvote[] @relation("PostDownvotes")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String?
  attachment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Comment Reactions (many-to-many through junction table)
  likes CommentReaction[]
}

// Junction Tables for MongoDB many-to-many relationships

model UserConnection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  status    String   @default("pending") // pending, accepted, blocked
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User @relation("UserConnections", fields: [userId], references: [id])
  friend User @relation("FriendConnections", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model NetworkMembership {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  networkId String   @db.ObjectId
  joinedAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  network Network @relation(fields: [networkId], references: [id])

  @@unique([userId, networkId])
}

model NetworkAdministration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  networkId  String   @db.ObjectId
  role       String   @default("admin") // admin, moderator
  assignedAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  network Network @relation(fields: [networkId], references: [id])

  @@unique([userId, networkId])
}

model PostUpvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user User @relation("PostUpvotes", fields: [userId], references: [id])
  post Post @relation("PostUpvotes", fields: [postId], references: [id])

  @@unique([userId, postId])
}

model PostDownvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user User @relation("PostDownvotes", fields: [userId], references: [id])
  post Post @relation("PostDownvotes", fields: [postId], references: [id])

  @@unique([userId, postId])
}

model CommentReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId
  type      String   @default("like") // "like"
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}
